1.awk和sed不同，sed更加倾向于对行进行处理，而awk更加倾向于对行中每一个字段进行处理。因此，awk适合小规模数据处理。
2.awk运行模式
  [root@www ~]# awk '条件类型1{动作1} 条件类型2{动作2}  ...' filename
awk也可以处理前一个程序的标准输入。
3. awk主要是处理每一行的字段内的数据，而默认的字段的分隔符为空格或者是[tab]键
4.比如我们可以去除IP前5并打印相关信息
  [root@www ~]# last -n 5| awk '{print $1 "\t" $3}'
$0代表的是整个行。$1 ...代表的是分隔后新的各个段的名字
5.awk是一行一行的进行出来，读取一行然后执行awk命令，然后接着读取下面一行，知道最终文件的结束。
6.awk内置变量
   NF  每一个（$0）拥有的字段的个数
   NR  目前awk处理的是“第几行”数据
   FS  目前的分割符是什么
7.例子 [root@www ~]# last -n 5| awk '{print $1 "\t  lines:"  NR  "\t columns:" NF}'
8. [root@www ~]# cat /etc/passwd | awk 'BEGIN {FS":"} $3<10  {print $1 "\t" $3}'
   BEGIN 关键字是因为如果没有，那么第一行就不会默认FS分割符是:，所以第一行就会执行错误，所以要加上。
9.统计工资总和信息
 [root@www ~]# cat pay.txt | awk 'NR==1 {printf "%10s %10s %10s %10s %10s\n" , $1 , $2 , $3 , $4 , "Total"}  NR>=2 {total = $1 +$2+$3+$4 ;print f "%10s  %10d %10d %10d %10.2f\n" , $1 ,$2,$3,$4,total}'
10.在printf中必须显示的使用"\n"才能换行。
11.awk动作中，即在{}内的动作，如果有需要多个命令一起使用的时候，可以使用";"间隔，或者是按回车转入下一行继续写第二条命令。
